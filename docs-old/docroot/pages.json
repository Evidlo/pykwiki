{"info": {"download.html": {"mtime_string": "14:02", "author": "Aaron Meier", "url": "/download.html", "mdate_string": "November 18, 2013", "mtimestamp": "2013-11-18 14:36", "mtime": 1384803418, "title": "Download", "blurb": " Download PyKwiki There are a few different ways to download PyKwiki  On Github Get the latest and greatest version on Github. a href=\"https://github.com/webgovernor/pykwiki/archive/master.zip\" class=\"btn btn-lg btn-success\"Github b class=\"glyphicon glyphicon-download\"/b/a * Or clone it directly with `git clone https://github.com/webgovernor/pykwiki.git` Install using `sudo ./setup.py install`  From PyPI Get the..."}, "about-search.html": {"mtime_string": "21:09", "author": "Aaron Meier", "url": "/about-search.html", "mdate_string": "November 12, 2013", "mtimestamp": "2013-11-12 21:44", "mtime": 1384310646, "title": "About Search", "blurb": "[TOC]  About Search  How it works  1. The search index Existing content is cached, and a search index is built. $ pykwiki cache ... The search index gets written to `docroot/idx.json`. **Sample JSON index file format** :::javascript { \"index\":{ \"foo\":[3,2,5], \"bar\":[3,1,6], \"baz\":[2], ... }, \"ids\":{ \"1\": \"somepage.html\",..."}, "authoring.html": {"mtime_string": "17:05", "author": "Aaron Meier", "url": "/authoring.html", "mdate_string": "November 16, 2013", "mtimestamp": "2013-11-16 17:17", "mtime": 1384640234, "title": "Authoring Pages", "blurb": "[TOC]  Overview Adding pages to your PyKwiki consists of two main pieces. 1. Some way to get your content to a server. 2. Some way to run `pykwiki cache` to cache your content.  Things to know Technical knowledge: 1. A basic understanding of [Markdown](/markdown.html). 2. A basic understanding..."}, "api.html": {"mtime_string": "16:04", "author": "Aaron Meier", "url": "/api.html", "mdate_string": "November 19, 2013", "mtimestamp": "2013-11-19 16:50", "mtime": 1384897849, "title": "API", "blurb": "[TOC]  Application Programming Interface  conf Object The conf object is made available to all theme templates.  Properties **config.yaml** Any property in `config.yaml` is available to this object. **Useful properties for themes** * `web_prefix` - When a theme makes calls to local resources, it should join the path..."}, "webserver.html": {"mtime_string": "14:02", "author": "Aaron Meier", "url": "/webserver.html", "mdate_string": "November 18, 2013", "mtimestamp": "2013-11-18 14:16", "mtime": 1384802160, "title": "Webserver", "blurb": " Webserver Configuration  Apache To configure Apache to work with PyKwiki, you'll need a virtual host entry for static files that points to the PyKwiki install. For example, if your project directory is `/home/hpotter/pykwiki/MyBlog`, then a virtual host entry might appear as follows: :::apache VirtualHost *:80 ServerName www.myblog.com DocumentRoot..."}, "markdown.html": {"mtime_string": "11:11", "author": "Aaron Meier", "url": "/markdown.html", "mdate_string": "November 11, 2013", "mtimestamp": "2013-11-11 11:14", "mtime": 1384186465, "title": "Markdown Basics", "blurb": " Markdown Markdown is a popular text format for editing files. It is often used to produce well formatted web content. It is used extensively by GitHub, Reddit, Stack Overflow, and many others. One of the easiest ways to become familiar with Markdown is to [give it a try](https://stackedit.io)! ..."}, "links.yaml.html": {"mtime_string": "12:12", "author": "Aaron Meier", "url": "/links.yaml.html", "mdate_string": "November 15, 2013", "mtimestamp": "2013-11-15 12:53", "mtime": 1384537994, "title": "links.yaml", "blurb": " links.yaml The `links.yaml` file specifies how PyKwiki should generate a menu for your site. **Example of the structure of a link:** :::yaml - Example Link Name:  PyKwiki page name, relative to the source directory, *optional* page: external-links  Used in a href=, *optional* href: http://google.com  Target attribute,..."}, "home.html": {"mtime_string": "17:05", "author": "Aaron Meier", "url": "/home.html", "mdate_string": "November 18, 2013", "mtimestamp": "2013-11-18 17:52", "mtime": 1384815145, "title": "Welcome!", "blurb": "PyKwiki introduction for new site administrators."}, "speed.html": {"mtime_string": "17:05", "author": "Aaron Meier", "url": "/speed.html", "mdate_string": "November 12, 2013", "mtimestamp": "2013-11-12 17:47", "mtime": 1384296437, "title": "Speed", "blurb": " Faster than PHP PyKwiki is fast because it's 100% static. No server side processing is necessary. Why regenerate a page every single time someone visits it? PyKwiki regenerates the page only when its content has changed. *But wait! How can that be if you have built-in searching?* PyKwiki generates..."}, "testing.html": {"mtime_string": "15:03", "author": "Aaron Meier", "url": "/testing.html", "mdate_string": "November 12, 2013", "mtimestamp": "2013-11-12 15:29", "mtime": 1384288148, "title": "testing", "blurb": ":::bash $ sudo pip install pykwiki ... $ pykwiki new MyProject ... $ cd MyProject $ pykwiki cache $ cd docroot $ python -m SimpleHTTPServer 5000 Serving HTTP on 0.0.0.0 port 5000 ......"}, "creating-themes.html": {"mtime_string": "16:04", "author": "Aaron Meier", "url": "/creating-themes.html", "mdate_string": "November 19, 2013", "mtimestamp": "2013-11-19 16:41", "mtime": 1384897304, "title": "Creating Themes", "blurb": "[TOC]  Creating themes PyKwiki themes are designed to be easy to create. Visit [[api]] to see a list of advanced functions and properties available to themes.  Theme Directory Structure :::text ThemeName/ info.yaml menu.html page.html pagelist.html posts.html search.html static/ * `info.yaml` - Includes information about the theme, such as..."}, "themes.html": {"mtime_string": "14:02", "author": "Aaron Meier", "url": "/themes.html", "mdate_string": "November 18, 2013", "mtimestamp": "2013-11-18 14:33", "mtime": 1384803200, "title": "Themes", "blurb": " Built-in themes PyKwiki features some built-in themes that can be installed with `pykwiki theme install theme_name`. div class=\"row\" {tpl:theme} name: Default class: col-sm-4 description: The default PyKwiki theme. image: pykwiki-theme-default.png features: - Valid HTML5 - Mobile friendly - Uses Bootstrap 3 - Supports searching - Includes respond.js for IE8..."}, "faqs.html": {"mtime_string": "17:05", "author": "Aaron Meier", "url": "/faqs.html", "mdate_string": "November 19, 2013", "mtimestamp": "2013-11-19 17:46", "mtime": 1384901210, "title": "Frequently Asked Questions", "blurb": "[TOC]  Frequently Asked Questions  About authoring  How do I specify the date of the page? In the page configuration section, set the `timestamp` key. It must match the format from `config.yaml` - `timestamp_format`. **Example** :::text [[ title: My Page tags: [stuff, moar stuff] timestamp: 2013-11-13 21:14 ]]..."}, "getting-started.html": {"mtime_string": "10:10", "author": "Aaron Meier", "url": "/getting-started.html", "mdate_string": "November 18, 2013", "mtimestamp": "2013-11-18 10:29", "mtime": 1384788552, "title": "Getting Started", "blurb": "[TOC]  Getting Started This guide outlines the minimal steps to get PyKwiki serving static files.  Requirements PyKwiki does not require anything outside of Python, but it does require the following Python packages: * `jinja2` (=2.6) - Jinja2 is used to compile themes into .html. * Install with `sudo..."}, "config.yaml.html": {"mtime_string": "12:12", "author": "Aaron Meier", "url": "/config.yaml.html", "mdate_string": "November 19, 2013", "mtimestamp": "2013-11-19 12:55", "mtime": 1384883701, "title": "config.yaml", "blurb": " config.yaml Below is a typical `config.yaml` file :::yaml  Maximum number of words to use in a blurb blurb_max: 50  The default home page to be written as docroot/index.html home_page: home.md site:  The site title, used in title title: My PyKwiki Project  Author for use in..."}, "extensions.html": {"mtime_string": "12:12", "author": "Aaron Meier", "url": "/extensions.html", "mdate_string": "November 11, 2013", "mtimestamp": "2013-11-11 12:58", "mtime": 1384192719, "title": "Extensions", "blurb": "[TOC]  PyKwiki Extensions  MarkDown Extensions  pykwiki.ext.page This extension is not compatible with the `wikilink` markdown extension. This extension syntax is: [[page:optional property]] Assuming you have a page in `source` called `home.md` with `title` set to \"Home\", then the following MarkDown: :::text Here is a link to [[home]]..."}, "support.html": {"mtime_string": "16:04", "author": "Aaron Meier", "url": "/support.html", "mdate_string": "November 16, 2013", "mtimestamp": "2013-11-16 16:58", "mtime": 1384639092, "title": "Support", "blurb": " Support The preferred method to report issues or ask questions is via the PyKwiki Github page. a href=\"https://github.com/webgovernor/pykwiki/issues\" class=\"btn btn-default btn-lg\"Github/a..."}, "features.html": {"mtime_string": "14:02", "author": "Aaron Meier", "url": "/features.html", "mdate_string": "October 12, 2013", "mtimestamp": "2013-10-12 14:21", "mtime": 1381602060, "title": "Features", "blurb": " Features An overview of PyKwiki's most important features. div class=\"row\" {tpl:feature} name: Recent Posts class: col-sm-4 description: PyKwiki works well for blogs, review sites, or anything else that needs a \"recent posts\" type of feature. screenshot: /uploads/features/recent_posts.png link: /posts.html link_label: Try it out &raquo; {endtpl} {tpl:feature} name: Ranked Searching..."}}, "ids": {"1": "home.html", "2": "themes.html", "3": "config.yaml.html", "4": "download.html", "5": "support.html", "6": "getting-started.html", "7": "features.html", "8": "about-search.html", "9": "api.html", "10": "testing.html", "11": "creating-themes.html", "12": "markdown.html", "13": "extensions.html", "14": "links.yaml.html", "15": "speed.html", "16": "authoring.html", "17": "faqs.html", "18": "webserver.html"}}